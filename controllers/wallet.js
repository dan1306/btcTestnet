const fetch = require("node-fetch");
const Wallet = require("../models/wallet");

async function addressDetails(req, res) {
  // Fetch call to retrieve address details
  // When view details is clicked

  console.log(req.params.addrs);

  try {
    // Here we store the public address we want to retrieve date from
    // in a variable. The public address is found in the params with a name of
    // addrs
    let addr = req.params.addrs;

    // here we make a get request to the Blockcypher 
    // API to retrive data for a given address
    let fetchResponse = await fetch(
      `https://api.blockcypher.com/v1/btc/test3/addrs/${addr}/full?limit=50`
    );

    // Note to self
    // probably shouldn't be assuming the response we get will be ok
    // but here the response we get will most likely be good, since we know the address exist
    // since it's an address in the database.

    // Note to future self
    // we will return back to this line of code in the future
    // to review if a bad request is received while making the API call
    // for address details
    fetchResponse = await fetchResponse.json();
    res.status(200).json(fetchResponse);
  } catch (e) {

    // if an err is encounters in the try block of code
    // we send the err to the front end
    res.status(400).json(e);
  }
}

async function yourWallets(req, res) {
  // Here we are getting every wallet in our databse, associated
  // with a users id
  Wallet.find({ userID: req.user._id }, (err, yourWallets) => {
    if (err) {
      // if there is an error we return the err to the front end
      // with a status of 400 which is a bad request
      res.status(400).json(err);
    } else {
      console.log(yourWallets);
      // if there is no error we return the list of users wallet to the front end
      // with a status of 200 which is a good request
      res.status(200).json(yourWallets);
    }
  });
}

async function allWallets(req, res) {
  // Here we are getting every wallet in our databse, apart from all wallets associated
  // with the user id of the user making the request to get all wallets
  Wallet.find({ userID: { $ne: req.user._id } }, (err, yourWallets) => {
    if (err) {
      // if there is an error we return the err to the front end
      // with a status of 400 which is a bad request
      res.status(400).json(err);
    } else {
      console.log(yourWallets);
      // if there is no error we return the list of all wallets not associated
      // with the user to the front end
      // with a status of 200 which is a good request
      res.status(200).json(yourWallets);
    }
  });
}

async function createWallet(req, res) {

  // set bech in the process of creating an address to be true, but when
  // removed and left the default to be false, and started
  // the whole process of creating and sending transactions again, there were no errors.


  // console.log(req.user);

  // Here we are making a post request to the Blockcypher API to
  // generate a brand new address and unique keys
  let data = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
  };
  
  let url = `https://api.blockcypher.com/v1/btc/test3/addrs?token=${process.env.token}`;

  let fetchResponse = await fetch(url, data);

  // we turn the response we get when the call was made into data
  // a dev can put to use. These are the keys generated by the API
  let addressKeys = await fetchResponse.json();

  console.log(fetchResponse.ok);
  if (!fetchResponse.ok) {
    // Note to self
    // again probably shouldn't be assuming but there hasnt been any errors so far
    // while generating addresses

    // if an err does appear in the future while generating a new address
    // this code will be revisited
    return res.status(400).json(addressKeys);
  }

  // if response is good while trying to generate a unique address
  // we proceed to run the code down below

  // Here we make a request to make a unique wallet with the name provided in the body
  // and the public address provided in our generated address and it keys above
  let data2 = {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      name: req.body.walletName,
      addresses: [addressKeys.address],
    }),
  };

  let url2 = `https://api.blockcypher.com/v1/btc/test3/wallets?token=${process.env.token}`;

  let fetchResponse2 = await fetch(url2, data2);

  let walletCreated = await fetchResponse2.json();

  if (!fetchResponse2.ok) {
    // if fetchResponse2 is false while trying to create a wallet for an address
    // we send the err to the front end with a status of 400 (bad reuest)
    console.log(fetchResponse2.ok, walletCreated);
    return res.status(400).json(walletCreated);
  }

  // the rest of the code can be considered an else block of code
  // for a positive response. 
  // here we store retieved data while creating a unique address and wallet in the databse
  // and save it
  let newWallet = new Wallet();
  newWallet.private = addressKeys.private;
  newWallet.public = addressKeys.public;
  newWallet.address = addressKeys.address;
  newWallet.wif = addressKeys.wif;
  newWallet.name = walletCreated.name;
  newWallet.userID = req.user._id;
  await newWallet.save();

  console.log(walletCreated);

  // we send saved data on a new walleet to the front end with a status
  // of 200 (good reponse)
  res.status(200).json(newWallet);
}

module.exports = {
  createWallet,
  yourWallets,
  allWallets,
  addressDetails,
};
